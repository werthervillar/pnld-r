/*
  This file is automatically generated. Any changes will be overwritten.
  Modify edit-pendencias.component.ts instead.
*/
import { ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { Subscription } from 'rxjs/Subscription';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { GridComponent } from '@radzen/angular/dist/grid';
import { TemplateFormComponent } from '@radzen/angular/dist/template-form';
import { LabelComponent } from '@radzen/angular/dist/label';
import { TextAreaComponent } from '@radzen/angular/dist/textarea';
import { ButtonComponent } from '@radzen/angular/dist/button';

import { PnldService } from '../pnld.service';
import { SecurityService } from '../security.service';

export class EditPendenciasGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('grid0') grid0: GridComponent;
  @ViewChild('form0') form0: TemplateFormComponent;
  @ViewChild('label1') label1: LabelComponent;
  @ViewChild('Observacoes') observacoes: TextAreaComponent;
  @ViewChild('label2') label2: LabelComponent;
  @ViewChild('Respostas') respostas: TextAreaComponent;
  @ViewChild('button1') button1: ButtonComponent;
  @ViewChild('button2') button2: ButtonComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  _location: Location;

  _subscription: Subscription;

  pnld: PnldService;

  security: SecurityService;

  canEdit: any;

  reembolsosdespesas: any;

  getHistoricosStatusReembolsosDespesaByHistoricoStatusReembolsoDespesasResult: any;

  getHistoricosStatusReembolsosDespesasResult: any;

  getHistoricosStatusReembolsosDespesasCount: any;

  getHistoricosStatusReembolsosDespesasListsResult: any;

  getHistoricosStatusReembolsosDespesasListsCount: any;

  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.pnld = this.injector.get(PnldService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    this._subscription.unsubscribe();
  }


  load() {
    this.canEdit = true;

    this.pnld.getReembolsosDespesaByReembolsoDespesa(this.parameters.ReembolsoDespesa)
    .subscribe((result: any) => {
      this.reembolsosdespesas = result;
    }, (result: any) => {
      this.canEdit = !(result.status == 400);
    });

    this.pnld.getHistoricosStatusReembolsosDespesaByHistoricoStatusReembolsoDespesas(null)
    .subscribe((result: any) => {
      this.getHistoricosStatusReembolsosDespesaByHistoricoStatusReembolsoDespesasResult = result.HistoricoStatusReembolsoDespesas;
    }, (result: any) => {

    });

    this.pnld.getHistoricosStatusReembolsosDespesas(null, this.grid0.allowPaging ? this.grid0.pageSize : null, this.grid0.allowPaging ? 0 : null, null, this.grid0.allowPaging, null, null, null)
    .subscribe((result: any) => {
      this.getHistoricosStatusReembolsosDespesasResult = result.value;

      this.getHistoricosStatusReembolsosDespesasCount = this.grid0.allowPaging ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });

    this.pnld.getHistoricosStatusReembolsosDespesasLists(`ReembolsoDespesa eq ${this.parameters.ReembolsoDespesa}`, this.grid0.allowPaging ? this.grid0.pageSize : null, this.grid0.allowPaging ? 0 : null, null, this.grid0.allowPaging, null, null, null)
    .subscribe((result: any) => {
      this.getHistoricosStatusReembolsosDespesasListsResult = result.value;

      this.getHistoricosStatusReembolsosDespesasListsCount = this.grid0.allowPaging ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });
  }

  grid0LoadData(event: any) {
    this.pnld.getHistoricosStatusReembolsosDespesas(`${event.filter} and ReembolsoDespesa eq ${this.parameters.ReembolsoDespesa}`, event.top, event.skip, `${event.orderby}`, event.top != null && event.skip != null, ``, null, null)
    .subscribe((result: any) => {
      this.getHistoricosStatusReembolsosDespesasResult = result.value;

      this.getHistoricosStatusReembolsosDespesasCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });

    this.pnld.getHistoricosStatusReembolsosDespesasLists(`${event.filter} and ReembolsoDespesa eq ${this.parameters.ReembolsoDespesa}`, event.top, event.skip, `${event.orderby}`, event.top != null && event.skip != null, ``, null, null)
    .subscribe((result: any) => {
      this.getHistoricosStatusReembolsosDespesasListsResult = result.value;

      this.getHistoricosStatusReembolsosDespesasListsCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });
  }

  form0Submit(event: any) {
    this.pnld.updateReembolsosDespesa(this.parameters.ReembolsoDespesa, event)
    .subscribe((result: any) => {
      if (this.dialogRef) {
        this.dialogRef.close();
      } else {
        this._location.back();
      }
    }, (result: any) => {
      this.canEdit = !(result.status == 400);
    });
  }

  button2Click(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    } else {
      this._location.back();
    }
  }
}
