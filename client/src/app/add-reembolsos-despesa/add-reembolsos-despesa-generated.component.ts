/*
  This file is automatically generated. Any changes will be overwritten.
  Modify add-reembolsos-despesa.component.ts instead.
*/
import { ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { Subscription } from 'rxjs/Subscription';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { FormComponent } from '@radzen/angular/dist/form';

import { PnldService } from '../pnld.service';
import { SecurityService } from '../security.service';

export class AddReembolsosDespesaGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('form0') form0: FormComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  _location: Location;

  _subscription: Subscription;

  pnld: PnldService;

  security: SecurityService;

  getStatusReembolsosDespesasPageSize: any;

  getStatusReembolsosDespesasResult: any;

  getStatusReembolsosDespesasCount: any;

  getReuniosPageSize: any;

  getReuniosResult: any;

  getReuniosCount: any;

  getParticipantesPageSize: any;

  getParticipantesResult: any;

  getParticipantesCount: any;

  getUsersResult: any;

  formData: any;

  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.pnld = this.injector.get(PnldService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    this._subscription.unsubscribe();
  }


  load() {
    this.getStatusReembolsosDespesasPageSize = 10;

    this.pnld.getStatusReembolsosDespesas(null, this.getStatusReembolsosDespesasPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getStatusReembolsosDespesasResult = result.value;

      this.getStatusReembolsosDespesasCount = result['@odata.count'];
    }, (result: any) => {

    });

    this.getReuniosPageSize = 10;

    this.pnld.getReunios(null, this.getReuniosPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getReuniosResult = result.value;

      this.getReuniosCount = result['@odata.count'];
    }, (result: any) => {

    });

    this.getParticipantesPageSize = 10;

    this.pnld.getParticipantes(null, this.getParticipantesPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getParticipantesResult = result.value;

      this.getParticipantesCount = result['@odata.count'];
    }, (result: any) => {

    });

    this.security.getUsers(null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.getUsersResult = result.value;
    }, (result: any) => {

    });

    this.formData = {};

    if (this.form0.form.controls.Responsavel.value == null) {
          this.security.getUsers(`UserName eq '${this.security.user.name}'`, null, null, null, null, null)
      .subscribe((result: any) => {
          this.form0.form.controls.Responsavel.setValue(result.value[0].Id)
      }, (result: any) => {
    
      });
    }
  }

  form0Cancel(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    } else {
      this._location.back();
    }
  }

  form0Change(event: any) {
    if (event.property == "Reuniao") {
          this.pnld.getReunioByReuniao(event.value)
      .subscribe((result: any) => {
          this.form0.form.controls.DataSaida.setValue(new Date(result.Inicio));
this.form0.form.controls.DataRetorno.setValue(new Date(result.Fim));
      }, (result: any) => {
    
      });
    }

    if (event.property == "Colaborador") {
          this.pnld.getParticipanteByParticipante1(event.value)
      .subscribe((result: any) => {
          this.form0.form.controls.Banco.setValue(result.Banco);
this.form0.form.controls.Agencia.setValue(result.Agencia);
this.form0.form.controls.Conta.setValue(result.Conta);
      }, (result: any) => {
    
      });
    }
  }

  form0LoadData(event: any) {
    if (event.property == 'Status') {
          this.pnld.getStatusReembolsosDespesas(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
      .subscribe((result: any) => {
          this.getStatusReembolsosDespesasResult = result.value;

      this.getStatusReembolsosDespesasCount = result['@odata.count'];
      }, (result: any) => {
    
      });
    }

    if (event.property == 'Reuniao') {
          this.pnld.getReunios(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
      .subscribe((result: any) => {
          this.getReuniosResult = result.value;

      this.getReuniosCount = result['@odata.count'];
      }, (result: any) => {
    
      });
    }

    if (event.property == 'Colaborador') {
          this.pnld.getParticipantes(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
      .subscribe((result: any) => {
          this.getParticipantesResult = result.value;

      this.getParticipantesCount = result['@odata.count'];
      }, (result: any) => {
    
      });
    }
  }

  form0Submit(event: any) {
    this.pnld.createReembolsosDespesa(event)
    .subscribe((result: any) => {
      if (this.dialogRef) {
        this.dialogRef.close();
      }
      this.router.navigate(['reembolsos-despesas']);
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to create new ReembolsosDespesa!` });
    });
  }
}
