/*
  This file is automatically generated. Any changes will be overwritten.
  Modify edit-itens-reembolsos-despesa.component.ts instead.
*/
import { ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { Subscription } from 'rxjs/Subscription';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { TabsComponent } from '@radzen/angular/dist/tabs';
import { TemplateFormComponent } from '@radzen/angular/dist/template-form';
import { LabelComponent } from '@radzen/angular/dist/label';
import { DropDownDataGridComponent } from '@radzen/angular/dist/dropdown-datagrid';
import { RequiredValidatorComponent } from '@radzen/angular/dist/required-validator';
import { DatePickerComponent } from '@radzen/angular/dist/datepicker';
import { TextBoxComponent } from '@radzen/angular/dist/textbox';
import { NumericComponent } from '@radzen/angular/dist/numeric';
import { ButtonComponent } from '@radzen/angular/dist/button';
import { GridComponent } from '@radzen/angular/dist/grid';
import { AddComprovanteComponent } from '../add-comprovante/add-comprovante.component';

import { PnldService } from '../pnld.service';
import { SecurityService } from '../security.service';

export class EditItensReembolsosDespesaGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('tabs0') tabs0: TabsComponent;
  @ViewChild('form0') form0: TemplateFormComponent;
  @ViewChild('label1') label1: LabelComponent;
  @ViewChild('ReembolsoDespesa') reembolsoDespesa: DropDownDataGridComponent;
  @ViewChild('ReembolsoDespesaRequiredValidator') reembolsoDespesaRequiredValidator: RequiredValidatorComponent;
  @ViewChild('label12') label12: LabelComponent;
  @ViewChild('Tipo') tipo: DropDownDataGridComponent;
  @ViewChild('TipoRequiredValidator') tipoRequiredValidator: RequiredValidatorComponent;
  @ViewChild('label2') label2: LabelComponent;
  @ViewChild('Data') data: DatePickerComponent;
  @ViewChild('DataRequiredValidator') dataRequiredValidator: RequiredValidatorComponent;
  @ViewChild('label3') label3: LabelComponent;
  @ViewChild('Origem') origem: TextBoxComponent;
  @ViewChild('label4') label4: LabelComponent;
  @ViewChild('Destino') destino: TextBoxComponent;
  @ViewChild('label5') label5: LabelComponent;
  @ViewChild('Entrada') entrada: DatePickerComponent;
  @ViewChild('label6') label6: LabelComponent;
  @ViewChild('Saida') saida: DatePickerComponent;
  @ViewChild('label7') label7: LabelComponent;
  @ViewChild('Referencia') referencia: TextBoxComponent;
  @ViewChild('label8') label8: LabelComponent;
  @ViewChild('Empresa') empresa: TextBoxComponent;
  @ViewChild('label9') label9: LabelComponent;
  @ViewChild('ValorGasto') valorGasto: NumericComponent;
  @ViewChild('leabl10') leabl10: LabelComponent;
  @ViewChild('ValorConcedido') valorConcedido: NumericComponent;
  @ViewChild('SaveButton') saveButton: ButtonComponent;
  @ViewChild('Cancelbutton') cancelbutton: ButtonComponent;
  @ViewChild('grid0') grid0: GridComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  _location: Location;

  _subscription: Subscription;

  pnld: PnldService;

  security: SecurityService;

  canEdit: any;

  itensreembolsosdespesa: any;

  getReembolsosDespesasPageSize: any;

  getReembolsosDespesasResult: any;

  getReembolsosDespesasCount: any;

  getTiposItensReembolsosDespesasPageSize: any;

  getTiposItensReembolsosDespesasResult: any;

  getTiposItensReembolsosDespesasCount: any;

  getComprovantesResult: any;

  getComprovantesCount: any;

  parameters: any;

  reembolsosdespesa: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.pnld = this.injector.get(PnldService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    this._subscription.unsubscribe();
  }


  load() {
    this.canEdit = true;

    this.pnld.getItensReembolsosDespesaByItemReembolsoDespesa(this.parameters.ItemReembolsoDespesa)
    .subscribe((result: any) => {
      this.itensreembolsosdespesa = result;
    }, (result: any) => {
      this.canEdit = !(result.status == 400);
    });

    this.getReembolsosDespesasPageSize = 10;

    this.pnld.getReembolsosDespesas(null, this.getReembolsosDespesasPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getReembolsosDespesasResult = result.value;

      this.getReembolsosDespesasCount = result['@odata.count'];
    }, (result: any) => {

    });

    this.getTiposItensReembolsosDespesasPageSize = 10;

    this.pnld.getTiposItensReembolsosDespesas(null, this.getTiposItensReembolsosDespesasPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getTiposItensReembolsosDespesasResult = result.value;

      this.getTiposItensReembolsosDespesasCount = result['@odata.count'];
    }, (result: any) => {

    });

    this.pnld.getComprovantes(`ItemReembolsoDespesa eq ${this.parameters.ItemReembolsoDespesa}`, this.grid0.allowPaging ? this.grid0.pageSize : null, this.grid0.allowPaging ? 0 : null, null, this.grid0.allowPaging, null, null, null)
    .subscribe((result: any) => {
      this.getComprovantesResult = result.value;

      this.getComprovantesCount = this.grid0.allowPaging ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });
  }

  form0Submit(event: any) {
    this.pnld.updateItensReembolsosDespesa(this.parameters.ItemReembolsoDespesa, event)
    .subscribe((result: any) => {
      if (this.dialogRef) {
        this.dialogRef.close();
      } else {
        this._location.back();
      }

      this.pnld.getReembolsosDespesaByReembolsoDespesa(this.itensreembolsosdespesa.ReembolsoDespesa)
      .subscribe((result: any) => {
        this.reembolsosdespesa = result;
      }, (result: any) => {

      });
    }, (result: any) => {
      this.canEdit = !(result.status == 400);

      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to update ItensReembolsosDespesa` });
    });
  }

  ReembolsoDespesaLoadData(event: any) {
    this.pnld.getReembolsosDespesas(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
    .subscribe((result: any) => {
      this.getReembolsosDespesasResult = result.value;

      this.getReembolsosDespesasCount = result['@odata.count'];
    }, (result: any) => {

    });
  }

  TipoLoadData(event: any) {
    this.pnld.getTiposItensReembolsosDespesas(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
    .subscribe((result: any) => {
      this.getTiposItensReembolsosDespesasResult = result.value;

      this.getTiposItensReembolsosDespesasCount = result['@odata.count'];
    }, (result: any) => {

    });
  }

  CancelbuttonClick(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    } else {
      this._location.back();
    }
  }

  grid0Add(event: any) {
    this.dialogService.open(AddComprovanteComponent, { parameters: {ItemReembolsoDespesa: this.parameters.ItemReembolsoDespesa}, title: 'Cadastrar Comprovante' });
  }

  grid0Delete(event: any) {
    this.pnld.deleteComprovante(event.Comprovante1)
    .subscribe((result: any) => {
      this.notificationService.notify({ severity: "success", summary: `Alerta`, detail: `Registro excluido com sucesso!` });
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Erro`, detail: `Erro ao excluir registro!` });
    });
  }

  grid0LoadData(event: any) {
    this.pnld.getComprovantes(`${event.filter} && ItemReembolsoDespesa eq ${this.parameters.ItemReembolsoDespesa}`, event.top, event.skip, `${event.orderby}`, event.top != null && event.skip != null, ``, null, null)
    .subscribe((result: any) => {
      this.getComprovantesResult = result.value;

      this.getComprovantesCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });
  }
}
