/*
  This file is automatically generated. Any changes will be overwritten.
  Modify generate-reembolsos.component.ts instead.
*/
import { ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { Subscription } from 'rxjs/Subscription';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { LabelComponent } from '@radzen/angular/dist/label';
import { DropDownComponent } from '@radzen/angular/dist/dropdown';
import { ButtonComponent } from '@radzen/angular/dist/button';
import { GridComponent } from '@radzen/angular/dist/grid';
import { CheckBoxComponent } from '@radzen/angular/dist/checkbox';

import { PnldService } from '../pnld.service';
import { SecurityService } from '../security.service';

export class GenerateReembolsosGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('label0') label0: LabelComponent;
  @ViewChild('dropdown0') dropdown0: DropDownComponent;
  @ViewChild('button0') button0: ButtonComponent;
  @ViewChild('grid0') grid0: GridComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  _location: Location;

  _subscription: Subscription;

  pnld: PnldService;

  security: SecurityService;

  getParticipantesResult: any;

  getParticipantesCount: any;

  getReuniosResult: any;

  getParticipantesSemReembolsoByReuniaosResult: any;

  getParticipantesSemReembolsoByReuniaosCount: any;

  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.pnld = this.injector.get(PnldService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    this._subscription.unsubscribe();
  }


  load() {
    this.pnld.getParticipantes(null, this.grid0.allowPaging ? this.grid0.pageSize : null, this.grid0.allowPaging ? 0 : null, null, this.grid0.allowPaging, null, null, null)
    .subscribe((result: any) => {
      this.getParticipantesResult = result.value;

      this.getParticipantesCount = this.grid0.allowPaging ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });

    this.pnld.getReunios(null, null, null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.getReuniosResult = result.value;
    }, (result: any) => {

    });

    this.pnld.getParticipantesSemReembolsoByReuniaos(null, null, this.grid0.allowPaging ? this.grid0.pageSize : null, this.grid0.allowPaging ? 0 : null, null, this.grid0.allowPaging, null, null, null)
    .subscribe((result: any) => {
      this.getParticipantesSemReembolsoByReuniaosResult = result.value;

      this.getParticipantesSemReembolsoByReuniaosCount = this.grid0.allowPaging ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });
  }

  dropdown0Change(event: any) {
    this.pnld.getParticipantesSemReembolsoByReuniaos(event.Reuniao, null, this.grid0.allowPaging ? this.grid0.pageSize : null, this.grid0.allowPaging ? 0 : null, null, this.grid0.allowPaging, null, null, null)
    .subscribe((result: any) => {
      this.getParticipantesSemReembolsoByReuniaosResult = result.value;

      this.getParticipantesSemReembolsoByReuniaosCount = this.grid0.allowPaging ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });
  }

  button0Click(event: any) {
    
  }

  grid0LoadData(event: any) {
    this.pnld.getParticipantes(`${event.filter}`, event.top, event.skip, `${event.orderby}`, event.top != null && event.skip != null, ``, null, null)
    .subscribe((result: any) => {
      this.getParticipantesResult = result.value;

      this.getParticipantesCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });

    this.pnld.getParticipantesSemReembolsoByReuniaos(null, `${event.filter}`, event.top, event.skip, `${event.orderby}`, event.top != null && event.skip != null, ``, null, null)
    .subscribe((result: any) => {
      this.getParticipantesSemReembolsoByReuniaosResult = result.value;

      this.getParticipantesSemReembolsoByReuniaosCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });
  }

  checkbox0Change(event: any, data: any) {
    
  }
}
